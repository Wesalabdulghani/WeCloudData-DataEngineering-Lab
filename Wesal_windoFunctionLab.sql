-- ----------------------- Window Function -----------------------

use superstore;

--  The owner of superstore company X wants to know how many customers brought in more than 3000$ in sales on their first purchase.
select count(*) as NumberOfCustomers
from 
(
    select CustomerID,
    OrderDate,
    sum(Sales) as TotalSales,
    min(OrderDate) over (partition by CustomerID) as FirstOrderDate
    from orders
    group by CustomerID,
    OrderID,
    OrderDate
) 
as CustomerOrders
where OrderDate = FirstOrderDate and TotalSales > 3000;

    
-- Superstore company X wants to know after how many purchases does it most commonly take for a customer to reach over a $5000 life time value.
select w.order_number,
 count(*)
from (select *, row_number() over (partition by CustomerID order by OrderDate asc) order_counts
      from (select *, row_number() over (partition by CustomerID order by OrderDate asc) order_number
            from (select *,
                         sum(Sales)
                             over (partition by CustomerID order by OrderDate rows between unbounded preceding and current row) running_sales
                  from (select CustomerId,
                  OrderDate,
                  OrderID,
                  sum(Sales) Sales
                        from orders
                        group by CustomerId,
                        OrderDate,
                        OrderID) 
                        as t)
                        as u)
                        as v
      where v.running_sales > 5000) w
where w.order_counts = 1
group by 1;
-- ---------------------- Classicmodels DB ----------------------
use classicmodels;
-- How many orders contain more than a 50% revenue contribution made by Vintage Cars or Classic cars
select productLine,
       count(*)
from (
    select *,
           productLine_revenue/order_total as percent
    from(
        select orderNumber,
               productLine,
               sum(revenue) as productLine_revenue, order_total
        from (
            select *,
                   sum(revenue) over (partition by orderNumber) as order_total
            from (
                select productCode,
                       productLine,
                       orderNumber,
                       quantityOrdered * priceEach as revenue
                from orderdetails
                    left join products
                        using (productCode)) as t
            ) as u
        group by productline, ordernumber, order_total) as v
    where productLine in ('Classic Cars', 'Vintage Cars')
    having percent > .5) as x
group by productLine;

-- Calculate the year over year growth generated by Company X
select yr,
       revenue,
	   previous_revenue,
      
       (revenue - previous_revenue)/previous_revenue * 100 as yr_over_yr
from (
    select *,
          
           lag(revenue) over() as previous_revenue
    from (
        select year(orderDate) as yr,
             
               sum(quantityOrdered * priceEach) as revenue
        from orders
            left join orderdetails
                using(orderNumber)
        group by yr) as t
    ) as u;













